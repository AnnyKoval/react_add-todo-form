{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","cn","TodoList","todos","map","getUser","userId","usersFromServer","find","App","useState","newTodo","setNewTodo","displayedTodos","setdisplayedTodos","isNoTitle","setIsNoTitle","isNoUser","setIsNoUser","handleOnChange","event","target","value","replace","action","method","onSubmit","preventDefault","Math","max","Number","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ebf83d1a.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { email, name } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id, completed, title, user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        cn('TodoInfo', { 'TodoInfo--completed': completed })\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        const { id } = todo;\n\n        return (\n          <TodoInfo\n            key={id}\n            todo={todo}\n          />\n        );\n      })}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nfunction getUser(userId: number): User | null {\n  const todosUser = usersFromServer.find(user => user.id === userId);\n\n  return todosUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const App: React.FC = () => {\n  const [newTodo, setNewTodo] = useState({ title: '', userId: '' });\n  const [displayedTodos, setdisplayedTodos] = useState(todos);\n  const [isNoTitle, setIsNoTitle] = useState(false);\n  const [isNoUser, setIsNoUser] = useState(false);\n\n  const createNewTodo = () => {\n    const toDoID = Math.max(...displayedTodos.map(todo => todo.id)) + 1;\n\n    return {\n      id: toDoID,\n      title: newTodo.title,\n      completed: false,\n      user: getUser(Number(newTodo.userId)),\n    };\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const { title, userId } = newTodo;\n\n    if (!title) {\n      setIsNoTitle(true);\n    }\n\n    if (!userId) {\n      setIsNoUser(true);\n    }\n\n    if (title && userId) {\n      setdisplayedTodos([...displayedTodos, createNewTodo()]);\n      setNewTodo({ title: '', userId: '' });\n    }\n  };\n\n  type Event = React.ChangeEvent<HTMLInputElement | HTMLSelectElement>;\n\n  const handleOnChange = (event: Event) => {\n    const { name, value } = event.target;\n\n    setNewTodo({\n      ...newTodo,\n      [name]: name === 'title'\n        ? value.replace(/[^a-zA-Zа-яА-Я0-9\\s+]+/g, '')\n        : value,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              name=\"title\"\n              placeholder=\"Enter a title\"\n              value={newTodo.title}\n              onChange={(event) => {\n                handleOnChange(event);\n                setIsNoTitle(false);\n              }}\n            />\n          </label>\n          {isNoTitle && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              name=\"userId\"\n              data-cy=\"userSelect\"\n              value={newTodo.userId}\n              onChange={(event) => {\n                handleOnChange(event);\n                setIsNoUser(false);\n              }}\n            >\n              <option value=\"\" disabled>Choose a user</option>\n              {usersFromServer.map(user => {\n                const { id, name } = user;\n\n                return (\n                  <option value={id}>{name}</option>\n                );\n              })}\n            </select>\n          </label>\n\n          {isNoUser && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList\n        todos={displayedTodos}\n      />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}